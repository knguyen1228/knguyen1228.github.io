/**
 * Represents a value that may be of type T, or null.
 */
export type Nullable<T> = T | null;
/**
 * Available values for the request close reason.
 */
export type CloseRequestReason = "close-button" | "escape-key" | "backdrop-click" | "external-invoker";
/**
 * @summary A custom element that renders a modal dialog.
 * @documentation https://github.com/georapbox/modal-element
 *
 * @tagname modal-element - This is the default tag name, unless overridden by the `defineCustomElement` method.
 * @extends HTMLElement
 *
 * @property {boolean} open - Determines whether the modal is open or not.
 * @property {boolean} staticBackdrop - Determines whether the modal should close when the backdrop is clicked.
 * @property {boolean} noHeader - Determines whether the modal should have a header or not.
 * @property {boolean} noAnimations - Determines whether the modal should have animations or not when opening and closing.
 * @property {boolean} noCloseButton - Determines whether the modal should have a default close button or not.
 * @property {boolean} fullscreen - Determines whether the modal should be fullscreen or not.
 * @property {boolean} preserveOverflow - Determines whether the overflow of the body should be preserved when the modal is open.
 * @property {string} placement - Determines the placement of the modal.
 * @property {string} closeLabel - The label of the default close button, used as the aria-label attribute of the close button.
 *
 * @attribute {boolean} open - Reflects the open property.
 * @attribute {boolean} static-backdrop - Reflects the staticBackdrop property.
 * @attribute {boolean} no-header - Reflects the noHeader property.
 * @attribute {boolean} no-animations - Reflects the noAnimations property.
 * @attribute {boolean} no-close-button - Reflects the noCloseButton property.
 * @attribute {boolean} fullscreen - Reflects the fullscreen property.
 * @attribute {boolean} preserve-overflow - Reflects the preserveOverflow property.
 * @attribute {string} placement - Reflects the placement property.
 * @attribute {string} close-label - Reflects the closeLabel property.
 *
 * @slot - The modal's main content (default/unnamed slot).
 * @slot header - The modal's header content, usually a title.
 * @slot footer - The modals' footer content. Usually used for buttons or other actions.
 * @slot close - The content of the close button that appears in the modal's header.
 *
 * @cssproperty --me-width - The width of the modal.
 * @cssproperty --me-height - The height of the modal.
 * @cssproperty --me-border-color - The border color of the modal.
 * @cssproperty --me-border-style - The border style of the modal.
 * @cssproperty --me-border-width - The border width of the modal.
 * @cssproperty --me-border-radius - The border radius of the modal.
 * @cssproperty --me-box-shadow - The box shadow of the modal.
 * @cssproperty --me-background-color - The background color of the modal.
 * @cssproperty --me-color - The foreground color of the modal.
 * @cssproperty --me-header-spacing - The spacing of the header.
 * @cssproperty --me-header-background-color - The background color of the header.
 * @cssproperty --me-header-color - The foreground color of the header.
 * @cssproperty --me-body-spacing - The spacing of the body.
 * @cssproperty --me-body-background-color - The background color of the body.
 * @cssproperty --me-body-color - The foreground color of the body.
 * @cssproperty --me-footer-spacing - The spacing of the footer.
 * @cssproperty --me-footer-background-color - The background color of the footer.
 * @cssproperty --me-footer-color - The foreground color of the footer.
 * @cssproperty --me-close-padding - The padding of the close button.
 * @cssproperty --me-close-border - The border shorthand property of the close button.
 * @cssproperty --me-close-border-radius - The border radius shorthand property of the close button.
 * @cssproperty --me-close-background-color - The background color of the close button.
 * @cssproperty --me-close-color - The foreground color of the close button.
 * @cssproperty --me-close-font-size - The font size of the close button.
 * @cssproperty --me-backdrop-background - The background shorthand property of the backdrop.
 * @cssproperty --me-backdrop-filter - The backdrop filter property of the backdrop.
 *
 * @csspart base - The base wrapper of the modal.
 * @csspart panel - The panel wrapper of the modal.
 * @csspart header - The header wrapper of the modal.
 * @csspart title - The title wrapper of the modal.
 * @csspart close - The default close button rendered in the modal's header.
 * @csspart close-icon - The close icon of the default close button.
 * @csspart body - The body wrapper of the modal.
 * @csspart footer - The footer wrapper of the modal.
 *
 * @fires me-open - Dispatched when the modal is opened.
 * @fires me-close - Dispatched when the modal is closed.
 * @fires me-request-close - Dispatched when the modal is about to close.
 *
 * @method defineCustomElement - Static method. Defines a custom element with the given name.
 * @method show - Instance method. Opens the modal if it is closed, otherwise does nothing.
 * @method hide - Instance method. Closes the modal if it is open, otherwise does nothing.
 */
export class ModalElement extends HTMLElement {
    static get observedAttributes(): string[];
    /**
     * Defines a custom element with the given name.
     * The name must contain a dash (-).
     *
     * @param {string} [elementName='modal-element']
     * @example
     * ModalElement.defineCustomElement('my-modal');
     */
    static defineCustomElement(elementName?: string | undefined): void;
    /**
     * Lifecycle method that is called when attributes are changed, added, removed, or replaced.
     *
     * @param {string} name - The name of the attribute.
     * @param {string} oldValue - The old value of the attribute.
     * @param {string} newValue - The new value of the attribute.
     */
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    /**
     * Lifecycle method that is called when the element is added to the DOM.
     */
    connectedCallback(): void;
    /**
     * Lifecycle method that is called when the element is removed from the DOM.
     */
    disconnectedCallback(): void;
    set open(value: boolean);
    /**
     * Deternimes if the modal is open or not.
     *
     * @type {boolean} - True if the modal is open, otherwise false.
     * @default false
     * @attribute open - Reflects the open property.
     */
    get open(): boolean;
    set staticBackdrop(value: boolean);
    /**
     * Determines whether the modal should close when the backdrop is clicked.
     *
     * @type {boolean} - True if the modal should close when the backdrop is clicked, otherwise false.
     * @default false
     * @attribute static-backdrop - Reflects the staticBackdrop property.
     */
    get staticBackdrop(): boolean;
    set noHeader(value: boolean);
    /**
     * Determines whether the modal should have a header or not.
     *
     * @type {boolean} - True if the modal should have a header, otherwise false.
     * @default false
     * @attribute no-header - Reflects the noHeader property.
     */
    get noHeader(): boolean;
    set noAnimations(value: boolean);
    /**
     * Determines whether the modal should have animations or not when opening and closing.
     *
     * @type {boolean} - True if the modal should have animations, otherwise false.
     * @default false
     * @attribute no-animations - Reflects the noAnimations property.
     */
    get noAnimations(): boolean;
    set noCloseButton(value: boolean);
    /**
     * Determines whether the modal should have a default close button or not.
     *
     * @type {boolean} - True if the modal should have a close button, otherwise false.
     * @default false
     * @attribute no-close-button - Reflects the noCloseButton property.
     */
    get noCloseButton(): boolean;
    set fullscreen(value: boolean);
    /**
     * Determines whether the modal should be fullscreen or not.
     *
     * @type {boolean} - True if the modal should be fullscreen, otherwise false.
     * @default false
     * @attribute fullscreen - Reflects the fullscreen property.
     */
    get fullscreen(): boolean;
    set preserveOverflow(value: boolean);
    /**
     * Determines whether the overflow of the body should be preserved when the modal is open.
     *
     * @type {boolean} - True if the overflow of the body should be preserved, otherwise false.
     * @default false
     * @attribute preserve-overflow - Reflects the preserveOverflow property.
     */
    get preserveOverflow(): boolean;
    set placement(value: string);
    /**
     * Determines the placement of the modal.
     * Possible values are 'top-start', 'top-center', 'top-end', 'center-start', 'center', 'center-end', 'bottom-start', 'bottom-center', 'bottom-end'.
     *
     * @type {string}
     * @default 'center'
     * @attribute placement - Reflects the placement property.
     */
    get placement(): string;
    set closeLabel(value: string);
    /**
     * The label of the default close button, used as the aria-label attribute of the close button.
     * If user provides text content for the close button using the `close` slot, this property is ignored and the aria-label attribute is removed.
     *
     * @type {string}
     * @default 'Close'
     * @attribute close-label - Reflects the closeLabel property.
     */
    get closeLabel(): string;
    /**
     * Opens the modal if it is closed, otherwise does nothing.
     * Make sure that the custom element is defined before calling this method.
     *
     * @example
     * const modal = document.querySelector('modal-element');
     * modal.show();
     */
    show(): void;
    /**
     * Closes the modal if it is open, otherwise does nothing.
     * Make sure that the custom element is defined before calling this method.
     *
     * @example
     * const modal = document.querySelector('modal-element');
     * modal.hide();
     */
    hide(): void;
    #private;
}
//# sourceMappingURL=modal-element.d.ts.map