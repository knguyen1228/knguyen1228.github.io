{
  "version": 3,
  "sources": ["../src/modal-element.js", "../src/modal-element-defined.js"],
  "sourcesContent": ["// @ts-check\n\n/**\n * Represents a value that may be of type T, or null.\n *\n * @template T\n * @typedef {T | null} Nullable\n */\n\n/**\n * Available values for the request close reason.\n *\n * @typedef {'close-button' | 'escape-key' | 'backdrop-click' | 'external-invoker'} CloseRequestReason\n */\n\nconst PULSE_ANIMATION_DURATION = 300; // milliseconds\nconst template = document.createElement('template');\n\nconst styles = /* css */ `\n  :host {\n    --me-width: 32rem;\n    --me-height: fit-content;\n    --me-border-color: initial;\n    --me-border-style: solid;\n    --me-border-width: initial;\n    --me-border-radius: 0;\n    --me-box-shadow: none;\n    --me-background-color: canvas;\n    --me-color: canvastext;\n\n    --me-header-spacing: 1rem;\n    --me-footer-spacing: 1rem;\n    --me-header-background-color: transparent;\n    --me-header-color: initial;\n\n    --me-body-spacing: 1rem;\n    --me-body-background-color: transparent;\n    --me-body-color: initial;\n    --me-footer-background-color: transparent;\n    --me-footer-color: initial;\n\n    --me-close-padding: 0.4375rem;\n    --me-close-border: none;\n    --me-close-border-radius: 0;\n    --me-close-background-color: transparent;\n    --me-close-color: inherit;\n    --me-close-font-size: 1rem;\n\n    --me-backdrop-background: rgba(0, 0, 0, 0.5);\n    --me-backdrop-filter: none;\n\n    display: contents;\n    box-sizing: border-box;\n  }\n\n  :host *,\n  :host *:after,\n  :host *:before {\n    box-sizing: inherit;\n  }\n\n  :host([hidden]),\n  [hidden] {\n    display: none !important;\n  }\n\n  /* Dialog */\n  .dialog {\n    --dialog-placement-margin: calc((2em + 6px) / 2);\n\n    width: var(--me-width);\n    height: var(--me-height);\n    padding: 0;\n    border-color: var(--me-border-color);\n    border-style: var(--me-border-style);\n    border-width: var(--me-border-width);\n    border-radius: var(--me-border-radius);\n    box-shadow: var(--me-box-shadow);\n    background-color: var(--me-background-color);\n    color: var(--me-color);\n  }\n\n  .dialog[open] {\n    display: flex;\n  }\n\n  :host([fullscreen]) .dialog {\n    max-width: 100%;\n    max-height: 100%;\n    width: 100%;\n    height: 100%;\n  }\n\n  .dialog::backdrop {\n    background: var(--me-backdrop-background, rgba(0, 0, 0, 0.5));\n    backdrop-filter: var(--me-backdrop-filter, none);\n    opacity: 0;\n  }\n\n  .dialog[open]::backdrop {\n    opacity: 1;\n  }\n\n  /* Dialog placement */\n  :host(:not([fullscreen])[placement=\"top-start\"]) .dialog {\n    margin-block-start: var(--dialog-placement-margin);\n    margin-inline-start: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"top-center\"]) .dialog {\n    margin-block-start: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"top-end\"]) .dialog {\n    margin-block-start: var(--dialog-placement-margin);\n    margin-inline-end: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"center-start\"]) .dialog {\n    margin-inline-start: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"center\"]) .dialog {\n    margin: auto;\n  }\n\n  :host(:not([fullscreen])[placement=\"center-end\"]) .dialog {\n    margin-inline-end: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"bottom-start\"]) .dialog {\n    margin-block-end: var(--dialog-placement-margin);\n    margin-inline-start: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"bottom-center\"]) .dialog {\n    margin-block-end: var(--dialog-placement-margin);\n  }\n\n  :host(:not([fullscreen])[placement=\"bottom-end\"]) .dialog {\n    margin-block-end: var(--dialog-placement-margin);\n    margin-inline-end: var(--dialog-placement-margin);\n  }\n\n  /* Dialog animations */\n  @media (prefers-reduced-motion: no-preference) {\n    .dialog:not(.dialog--no-animations),\n    .dialog:not(.dialog--no-animations)::backdrop {\n      transition: transform 0.3s, opacity 0.3s, display 0.3s allow-discrete, overlay 0.3s allow-discrete;\n    }\n\n    /* 1. IS-OPEN STATE */\n    .dialog[open] {\n      transform: scale(1);\n      opacity: 1;\n    }\n\n    /* 2. EXIT STATE */\n    .dialog {\n      transform: scale(0.95);\n      opacity: 0;\n    }\n\n    /* 0. BEFORE-OPEN STATE */\n    @starting-style {\n      .dialog[open] {\n        transform: scale(0.95);\n        opacity: 0;\n      }\n\n      .dialog[open]::backdrop {\n        opacity: 0;\n      }\n    }\n\n    .dialog--pulse:not(.dialog--no-animations) {\n      animation-name: pulse;\n      animation-duration: ${PULSE_ANIMATION_DURATION}ms;\n      animation-timing-function: cubic-bezier(0.2, 0, 0.38, 0.9);\n    }\n\n    @keyframes pulse {\n      0% { transform: scale(1); }\n      50% { transform: scale(1.02); }\n      100% { transform: scale(1); }\n    }\n  }\n\n  /* Dialog panel, header, body, footer */\n  .dialog__panel {\n    display: flex;\n    flex-direction: column;\n    flex: 1 1 auto;\n    width: 100%;\n  }\n\n  .dialog__header {\n    display: flex;\n    align-items: center;\n    padding: var(--me-header-spacing);\n    column-gap: 0.5rem;\n    background-color: var(--me-header-background-color);\n    color: var(--me-header-color);\n  }\n\n  :host([no-close-button]) .dialog__header {\n    column-gap: 0;\n  }\n\n  .dialog__title {\n    display: block;\n    flex: 1 1 auto;\n    padding: 0;\n    margin: 0;\n  }\n\n  .dialog__body {\n    display: block;\n    flex: 1 1 auto;\n    padding: var(--me-body-spacing);\n    overflow: auto;\n    background-color: var(--me-body-background-color);\n    color: var(--me-body-color);\n    overscroll-behavior: contain;\n  }\n\n  .dialog__footer {\n    flex: 0 0 auto;\n    text-align: end;\n    padding: var(--me-footer-spacing);\n    background-color: var(--me-footer-background-color);\n    color: var(--me-footer-color);\n  }\n\n  .dialog__close {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: var(--me-close-padding);\n    border: var(--me-close-border);\n    border-radius: var(--me-close-border-radius);\n    background-color: var(--me-close-background-color);\n    color: var(--me-close-color);\n    font-size: var(--me-close-font-size);\n  }\n\n  .dialog__close:not(:disabled) {\n    cursor: pointer;\n  }\n\n  .dialog__close:disabled {\n    cursor: not-allowed;\n  }\n`;\n\ntemplate.innerHTML = /* html */ `\n  <style>${styles}</style>\n\n  <dialog part=\"base\" class=\"dialog\">\n    <div part=\"panel\" class=\"dialog__panel\" aria-labelledby=\"title\">\n      <header part=\"header\" class=\"dialog__header\">\n        <slot name=\"header\" part=\"title\" class=\"dialog__title\" id=\"title\"></slot>\n\n        <form method=\"dialog\">\n          <button type=\"submit\" part=\"close\" class=\"dialog__close\" aria-label=\"Close\">\n            <slot name=\"close\">\n              <svg part=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.125em\" height=\"1.125em\" fill=\"currentColor\" viewBox=\"0 0 16 16\" aria-hidden=\"true\">\n                <path d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\"/>\n              </svg>\n            </slot>\n          </button>\n        </form>\n      </header>\n\n      <slot part=\"body\" class=\"dialog__body\"></slot>\n\n      <footer part=\"footer\" class=\"dialog__footer\" hidden>\n        <slot name=\"footer\"></slot>\n      </footer>\n    </div>\n  </dialog>\n`;\n\n/**\n * @summary A custom element that renders a modal dialog.\n * @documentation https://github.com/georapbox/modal-element\n *\n * @tagname modal-element - This is the default tag name, unless overridden by the `defineCustomElement` method.\n * @extends HTMLElement\n *\n * @property {boolean} open - Determines whether the modal is open or not.\n * @property {boolean} staticBackdrop - Determines whether the modal should close when the backdrop is clicked.\n * @property {boolean} noHeader - Determines whether the modal should have a header or not.\n * @property {boolean} noAnimations - Determines whether the modal should have animations or not when opening and closing.\n * @property {boolean} noCloseButton - Determines whether the modal should have a default close button or not.\n * @property {boolean} fullscreen - Determines whether the modal should be fullscreen or not.\n * @property {boolean} preserveOverflow - Determines whether the overflow of the body should be preserved when the modal is open.\n * @property {string} placement - Determines the placement of the modal.\n * @property {string} closeLabel - The label of the default close button, used as the aria-label attribute of the close button.\n *\n * @attribute {boolean} open - Reflects the open property.\n * @attribute {boolean} static-backdrop - Reflects the staticBackdrop property.\n * @attribute {boolean} no-header - Reflects the noHeader property.\n * @attribute {boolean} no-animations - Reflects the noAnimations property.\n * @attribute {boolean} no-close-button - Reflects the noCloseButton property.\n * @attribute {boolean} fullscreen - Reflects the fullscreen property.\n * @attribute {boolean} preserve-overflow - Reflects the preserveOverflow property.\n * @attribute {string} placement - Reflects the placement property.\n * @attribute {string} close-label - Reflects the closeLabel property.\n *\n * @slot - The modal's main content (default/unnamed slot).\n * @slot header - The modal's header content, usually a title.\n * @slot footer - The modals' footer content. Usually used for buttons or other actions.\n * @slot close - The content of the close button that appears in the modal's header.\n *\n * @cssproperty --me-width - The width of the modal.\n * @cssproperty --me-height - The height of the modal.\n * @cssproperty --me-border-color - The border color of the modal.\n * @cssproperty --me-border-style - The border style of the modal.\n * @cssproperty --me-border-width - The border width of the modal.\n * @cssproperty --me-border-radius - The border radius of the modal.\n * @cssproperty --me-box-shadow - The box shadow of the modal.\n * @cssproperty --me-background-color - The background color of the modal.\n * @cssproperty --me-color - The foreground color of the modal.\n * @cssproperty --me-header-spacing - The spacing of the header.\n * @cssproperty --me-header-background-color - The background color of the header.\n * @cssproperty --me-header-color - The foreground color of the header.\n * @cssproperty --me-body-spacing - The spacing of the body.\n * @cssproperty --me-body-background-color - The background color of the body.\n * @cssproperty --me-body-color - The foreground color of the body.\n * @cssproperty --me-footer-spacing - The spacing of the footer.\n * @cssproperty --me-footer-background-color - The background color of the footer.\n * @cssproperty --me-footer-color - The foreground color of the footer.\n * @cssproperty --me-close-padding - The padding of the close button.\n * @cssproperty --me-close-border - The border shorthand property of the close button.\n * @cssproperty --me-close-border-radius - The border radius shorthand property of the close button.\n * @cssproperty --me-close-background-color - The background color of the close button.\n * @cssproperty --me-close-color - The foreground color of the close button.\n * @cssproperty --me-close-font-size - The font size of the close button.\n * @cssproperty --me-backdrop-background - The background shorthand property of the backdrop.\n * @cssproperty --me-backdrop-filter - The backdrop filter property of the backdrop.\n *\n * @csspart base - The base wrapper of the modal.\n * @csspart panel - The panel wrapper of the modal.\n * @csspart header - The header wrapper of the modal.\n * @csspart title - The title wrapper of the modal.\n * @csspart close - The default close button rendered in the modal's header.\n * @csspart close-icon - The close icon of the default close button.\n * @csspart body - The body wrapper of the modal.\n * @csspart footer - The footer wrapper of the modal.\n *\n * @fires me-open - Dispatched when the modal is opened.\n * @fires me-close - Dispatched when the modal is closed.\n * @fires me-request-close - Dispatched when the modal is about to close.\n *\n * @method defineCustomElement - Static method. Defines a custom element with the given name.\n * @method show - Instance method. Opens the modal if it is closed, otherwise does nothing.\n * @method hide - Instance method. Closes the modal if it is open, otherwise does nothing.\n */\nclass ModalElement extends HTMLElement {\n  /** @type {Nullable<HTMLDialogElement>} */\n  #dialogEl = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #footerSlotEl = null;\n\n  /** @type {Nullable<HTMLSlotElement>} */\n  #closeSlotEl = null;\n\n  /** @type {ReturnType<typeof setTimeout> | undefined} */\n  #pulseAnimationTimeout = void 0;\n\n  constructor() {\n    super();\n\n    if (!this.shadowRoot) {\n      const shadowRoot = this.attachShadow({ mode: 'open' });\n      shadowRoot.appendChild(template.content.cloneNode(true));\n    }\n\n    if (this.shadowRoot) {\n      this.#dialogEl = this.shadowRoot.querySelector('dialog');\n      this.#footerSlotEl = this.shadowRoot.querySelector('slot[name=\"footer\"]');\n      this.#closeSlotEl = this.shadowRoot.querySelector('slot[name=\"close\"]');\n    }\n  }\n\n  static get observedAttributes() {\n    return ['open', 'no-header', 'no-animations', 'no-close-button', 'close-label'];\n  }\n\n  /**\n   * Lifecycle method that is called when attributes are changed, added, removed, or replaced.\n   *\n   * @param {string} name - The name of the attribute.\n   * @param {string} oldValue - The old value of the attribute.\n   * @param {string} newValue - The new value of the attribute.\n   */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (this.#dialogEl === null) {\n      return;\n    }\n\n    if (name === 'open' && oldValue !== newValue) {\n      if (this.open) {\n        this.#dialogEl.showModal();\n\n        this.dispatchEvent(\n          new CustomEvent('me-open', {\n            bubbles: true,\n            composed: true,\n            detail: { element: this }\n          })\n        );\n\n        if (document.body && !this.preserveOverflow) {\n          document.body.style.overflow = 'hidden';\n        }\n      } else {\n        this.#dialogEl.close();\n      }\n    }\n\n    if (name === 'no-header' && oldValue !== newValue) {\n      /** @type {Nullable<HTMLElement>} */\n      const headerEl = this.#dialogEl.querySelector('.dialog__header');\n\n      if (headerEl !== null) {\n        headerEl.hidden = this.noHeader;\n      }\n    }\n\n    if (name === 'no-animations' && oldValue !== newValue) {\n      this.#dialogEl.classList.toggle('dialog--no-animations', this.noAnimations);\n    }\n\n    if (name === 'no-close-button' && oldValue !== newValue) {\n      /** @type {Nullable<HTMLElement>} */\n      const closeBtnEl = this.#dialogEl.querySelector('.dialog__close');\n\n      if (closeBtnEl !== null) {\n        closeBtnEl.hidden = this.noCloseButton;\n      }\n    }\n\n    if (name === 'close-label' && oldValue !== newValue) {\n      this.#updateCloseLabel();\n    }\n  }\n\n  /**\n   * Lifecycle method that is called when the element is added to the DOM.\n   */\n  connectedCallback() {\n    this.#upgradeProperty('open');\n    this.#upgradeProperty('staticBackdrop');\n    this.#upgradeProperty('noHeader');\n    this.#upgradeProperty('noAnimations');\n    this.#upgradeProperty('noCloseButton');\n    this.#upgradeProperty('fullscreen');\n    this.#upgradeProperty('preserveOverflow');\n    this.#upgradeProperty('placement');\n    this.#upgradeProperty('closeLabel');\n\n    this.#dialogEl?.addEventListener('click', this.#handleDialogClick);\n    this.#dialogEl?.addEventListener('close', this.#handleDialogClose);\n    this.#dialogEl?.addEventListener('cancel', this.#handleDialogCancel);\n    this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.addEventListener('submit', this.#handleCloseButtonClick);\n    this.#footerSlotEl?.addEventListener('slotchange', this.#handleFooterSlotChange);\n    this.#closeSlotEl?.addEventListener('slotchange', this.#handleCloseSlotChange);\n  }\n\n  /**\n   * Lifecycle method that is called when the element is removed from the DOM.\n   */\n  disconnectedCallback() {\n    this.#pulseAnimationTimeout && clearTimeout(this.#pulseAnimationTimeout);\n    this.#dialogEl?.addEventListener('click', this.#handleDialogClick);\n    this.#dialogEl?.removeEventListener('close', this.#handleDialogClose);\n    this.#dialogEl?.removeEventListener('cancel', this.#handleDialogCancel);\n    this.#dialogEl?.querySelector('form[method=\"dialog\"]')?.removeEventListener('submit', this.#handleCloseButtonClick);\n    this.#footerSlotEl?.removeEventListener('slotchange', this.#handleFooterSlotChange);\n    this.#closeSlotEl?.removeEventListener('slotchange', this.#handleCloseSlotChange);\n  }\n\n  /**\n   * Deternimes if the modal is open or not.\n   *\n   * @type {boolean} - True if the modal is open, otherwise false.\n   * @default false\n   * @attribute open - Reflects the open property.\n   */\n  get open() {\n    return this.hasAttribute('open');\n  }\n\n  set open(value) {\n    this.toggleAttribute('open', !!value);\n  }\n\n  /**\n   * Determines whether the modal should close when the backdrop is clicked.\n   *\n   * @type {boolean} - True if the modal should close when the backdrop is clicked, otherwise false.\n   * @default false\n   * @attribute static-backdrop - Reflects the staticBackdrop property.\n   */\n  get staticBackdrop() {\n    return this.hasAttribute('static-backdrop');\n  }\n\n  set staticBackdrop(value) {\n    this.toggleAttribute('static-backdrop', !!value);\n  }\n\n  /**\n   * Determines whether the modal should have a header or not.\n   *\n   * @type {boolean} - True if the modal should have a header, otherwise false.\n   * @default false\n   * @attribute no-header - Reflects the noHeader property.\n   */\n  get noHeader() {\n    return this.hasAttribute('no-header');\n  }\n\n  set noHeader(value) {\n    this.toggleAttribute('no-header', !!value);\n  }\n\n  /**\n   * Determines whether the modal should have animations or not when opening and closing.\n   *\n   * @type {boolean} - True if the modal should have animations, otherwise false.\n   * @default false\n   * @attribute no-animations - Reflects the noAnimations property.\n   */\n  get noAnimations() {\n    return this.hasAttribute('no-animations');\n  }\n\n  set noAnimations(value) {\n    this.toggleAttribute('no-animations', !!value);\n  }\n\n  /**\n   * Determines whether the modal should have a default close button or not.\n   *\n   * @type {boolean} - True if the modal should have a close button, otherwise false.\n   * @default false\n   * @attribute no-close-button - Reflects the noCloseButton property.\n   */\n  get noCloseButton() {\n    return this.hasAttribute('no-close-button');\n  }\n\n  set noCloseButton(value) {\n    this.toggleAttribute('no-close-button', !!value);\n  }\n\n  /**\n   * Determines whether the modal should be fullscreen or not.\n   *\n   * @type {boolean} - True if the modal should be fullscreen, otherwise false.\n   * @default false\n   * @attribute fullscreen - Reflects the fullscreen property.\n   */\n  get fullscreen() {\n    return this.hasAttribute('fullscreen');\n  }\n\n  set fullscreen(value) {\n    this.toggleAttribute('fullscreen', !!value);\n  }\n\n  /**\n   * Determines whether the overflow of the body should be preserved when the modal is open.\n   *\n   * @type {boolean} - True if the overflow of the body should be preserved, otherwise false.\n   * @default false\n   * @attribute preserve-overflow - Reflects the preserveOverflow property.\n   */\n  get preserveOverflow() {\n    return this.hasAttribute('preserve-overflow');\n  }\n\n  set preserveOverflow(value) {\n    this.toggleAttribute('preserve-overflow', !!value);\n  }\n\n  /**\n   * Determines the placement of the modal.\n   * Possible values are 'top-start', 'top-center', 'top-end', 'center-start', 'center', 'center-end', 'bottom-start', 'bottom-center', 'bottom-end'.\n   *\n   * @type {string}\n   * @default 'center'\n   * @attribute placement - Reflects the placement property.\n   */\n  get placement() {\n    return this.getAttribute('placement') || 'center';\n  }\n\n  set placement(value) {\n    this.setAttribute('placement', value != null ? value.toString() : value);\n  }\n\n  /**\n   * The label of the default close button, used as the aria-label attribute of the close button.\n   * If user provides text content for the close button using the `close` slot, this property is ignored and the aria-label attribute is removed.\n   *\n   * @type {string}\n   * @default 'Close'\n   * @attribute close-label - Reflects the closeLabel property.\n   */\n  get closeLabel() {\n    return this.getAttribute('close-label') || 'Close';\n  }\n\n  set closeLabel(value) {\n    this.setAttribute('close-label', value != null ? value.toString() : value);\n  }\n\n  /**\n   * Updates the aria-label attribute of the close button.\n   * If the slot for the close button has text content, the aria-label attribute is removed to allow the text content to be used as the label.\n   * Otherwise, the aria-label attribute is set to the `closeLabel` property.\n   *\n   * @returns\n   */\n  #updateCloseLabel() {\n    if (this.#dialogEl === null) {\n      return;\n    }\n\n    const closeButtonEl = this.#dialogEl.querySelector('.dialog__close');\n\n    if (closeButtonEl === null) {\n      return;\n    }\n\n    const assignedElements = this.#closeSlotEl?.assignedElements() || [];\n    const hasTextContent = assignedElements?.some(el => el.textContent?.replace(/\\s/g, '') !== '');\n\n    hasTextContent\n      ? closeButtonEl.removeAttribute('aria-label')\n      : closeButtonEl.setAttribute('aria-label', this.closeLabel);\n  }\n\n  /**\n   * Applies a pulse effect on the dialog.\n   */\n  #applyPulseEffectOnDialog() {\n    if (this.#pulseAnimationTimeout) {\n      return;\n    }\n\n    this.#dialogEl?.classList.add('dialog--pulse');\n\n    this.#pulseAnimationTimeout = setTimeout(() => {\n      this.#dialogEl?.classList.remove('dialog--pulse');\n      clearTimeout(this.#pulseAnimationTimeout);\n      this.#pulseAnimationTimeout = void 0;\n    }, PULSE_ANIMATION_DURATION);\n  }\n\n  /**\n   * Handles the close event of the dialog.\n   */\n  #handleDialogClose = () => {\n    // This is required because the dialog element does not reset\n    // the open property when the dialog is closed by the user.\n    this.open = false;\n\n    this.dispatchEvent(\n      new CustomEvent('me-close', {\n        bubbles: true,\n        composed: true,\n        detail: { element: this }\n      })\n    );\n\n    if (document.body && !this.preserveOverflow) {\n      document.body.style.overflow = '';\n    }\n  };\n\n  /**\n   * Handles the cancel event of the dialog.\n   * This event is fired when the user presses the escape key.\n   *\n   * @param {Event} evt - The cancel event.\n   */\n  #handleDialogCancel = evt => {\n    const requestCloseEvent = this.#createRequestCloseEvent('escape-key');\n\n    this.dispatchEvent(requestCloseEvent);\n\n    if (requestCloseEvent.defaultPrevented) {\n      evt.preventDefault();\n      !this.noAnimations && this.#applyPulseEffectOnDialog();\n    }\n  };\n\n  /**\n   * Handles the click event of the close button.\n   *\n   * @param {Event} evt - The click event.\n   */\n  #handleCloseButtonClick = evt => {\n    const requestCloseEvent = this.#createRequestCloseEvent('close-button');\n\n    this.dispatchEvent(requestCloseEvent);\n\n    if (requestCloseEvent.defaultPrevented) {\n      evt.preventDefault();\n      !this.noAnimations && this.#applyPulseEffectOnDialog();\n    }\n  };\n\n  /**\n   * Handles the click event of the dialog.\n   *\n   * @param {MouseEvent} evt - The click event.\n   */\n  #handleDialogClick = evt => {\n    const target = evt.target;\n    const currentTarget = evt.currentTarget;\n\n    // Close the dialog when the backdrop is clicked.\n    if (target === currentTarget) {\n      const requestCloseEvent = this.#createRequestCloseEvent('backdrop-click');\n\n      this.dispatchEvent(requestCloseEvent);\n\n      if (requestCloseEvent.defaultPrevented || this.staticBackdrop) {\n        !this.noAnimations && this.#applyPulseEffectOnDialog();\n      } else {\n        this.hide();\n      }\n    }\n\n    // Close the dialog when external invoker is clicked.\n    if (target instanceof HTMLElement && target.closest('[data-me-close]') !== null) {\n      const requestCloseEvent = this.#createRequestCloseEvent('external-invoker');\n\n      this.dispatchEvent(requestCloseEvent);\n\n      if (requestCloseEvent.defaultPrevented) {\n        !this.noAnimations && this.#applyPulseEffectOnDialog();\n      } else {\n        this.hide();\n      }\n    }\n  };\n\n  /**\n   * Handles the slotchange event of the footer slot.\n   */\n  #handleFooterSlotChange = () => {\n    if (this.#dialogEl === null) {\n      return;\n    }\n\n    /** @type {Nullable<HTMLElement>} */\n    const footerEl = this.#dialogEl.querySelector('.dialog__footer');\n\n    if (footerEl === null) {\n      return;\n    }\n\n    const footerSlotNodes = this.#footerSlotEl?.assignedNodes();\n    const hasFooterSlotNodes = footerSlotNodes ? footerSlotNodes.length > 0 : false;\n\n    footerEl.hidden = !hasFooterSlotNodes;\n  };\n\n  /**\n   * Handles the slotchange event of the close slot.\n   */\n  #handleCloseSlotChange = () => {\n    this.#updateCloseLabel();\n  };\n\n  /**\n   * Creates a request close event.\n   *\n   * @param {CloseRequestReason} reason - The reason that the modal is about to close.\n   */\n  #createRequestCloseEvent(reason) {\n    return new CustomEvent('me-request-close', {\n      bubbles: true,\n      composed: true,\n      cancelable: true,\n      detail: {\n        reason,\n        element: this\n      }\n    });\n  }\n\n  /**\n   * This is to safe guard against cases where, for instance, a framework may have added the element to the page and set a\n   * value on one of its properties, but lazy loaded its definition. Without this guard, the upgraded element would miss that\n   * property and the instance property would prevent the class property setter from ever being called.\n   *\n   * https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n   *\n   * @param {'open' | 'staticBackdrop' | 'noHeader' | 'noAnimations' | 'noCloseButton' | 'fullscreen' | 'preserveOverflow' | 'placement' | 'closeLabel'} prop - The property to upgrade.\n   */\n  #upgradeProperty(prop) {\n    /** @type {any} */\n    const instance = this;\n\n    if (Object.prototype.hasOwnProperty.call(instance, prop)) {\n      const value = instance[prop];\n      delete instance[prop];\n      instance[prop] = value;\n    }\n  }\n\n  /**\n   * Opens the modal if it is closed, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.show();\n   */\n  show() {\n    if (this.open) {\n      return;\n    }\n\n    this.open = true;\n  }\n\n  /**\n   * Closes the modal if it is open, otherwise does nothing.\n   * Make sure that the custom element is defined before calling this method.\n   *\n   * @example\n   * const modal = document.querySelector('modal-element');\n   * modal.hide();\n   */\n  hide() {\n    if (!this.open) {\n      return;\n    }\n\n    this.open = false;\n  }\n\n  /**\n   * Defines a custom element with the given name.\n   * The name must contain a dash (-).\n   *\n   * @param {string} [elementName='modal-element']\n   * @example\n   * ModalElement.defineCustomElement('my-modal');\n   */\n  static defineCustomElement(elementName = 'modal-element') {\n    if (typeof window !== 'undefined' && !window.customElements.get(elementName)) {\n      window.customElements.define(elementName, ModalElement);\n    }\n  }\n}\n\nexport { ModalElement };\n", "import { ModalElement } from './modal-element.js';\n\nModalElement.defineCustomElement();\n\nexport { ModalElement };\n"],
  "mappings": "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",
  "names": ["template", "styles", "ModalElement", "_ModalElement", "#dialogEl", "#footerSlotEl", "#closeSlotEl", "#pulseAnimationTimeout", "name", "oldValue", "newValue", "headerEl", "closeBtnEl", "#updateCloseLabel", "#upgradeProperty", "#handleDialogClick", "#handleDialogClose", "#handleDialogCancel", "#handleCloseButtonClick", "#handleFooterSlotChange", "#handleCloseSlotChange", "value", "closeButtonEl", "el", "#applyPulseEffectOnDialog", "evt", "requestCloseEvent", "#createRequestCloseEvent", "target", "currentTarget", "footerEl", "footerSlotNodes", "hasFooterSlotNodes", "reason", "prop", "instance", "elementName", "ModalElement"]
}
